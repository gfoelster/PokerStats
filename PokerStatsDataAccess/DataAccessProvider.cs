using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace PokerStatsDataAccess
{
    public class DataAccessProvider
    {
        private PokerDBDataContext ctx = new PokerDBDataContext();

        private static DataAccessProvider _current = null;
        public static DataAccessProvider Current
        {
            get
            {
                if (_current == null)
                    _current = new DataAccessProvider();

                return _current;
            }
        }

        public DataAccessProvider()
        {

        }

        public List<Game> GetActiveGames()
        {
            return ctx.Games.Where(g => g.IsActive).ToList();
        }
        public bool GameNameExists(string gameName)
        {
            return ctx.Games.Any(g => g.Name.ToLower() == gameName.Trim().ToLower());
        }
        public int StartNewGame(string gameName, string userLogin)
        {
            User user = ctx.Users.Single(u => u.Login == userLogin);

            Game newGame = new Game()
            {
                Name  = gameName,
                IsActive = true,
                StartTime = DateTime.Now
            };

            ctx.Games.InsertOnSubmit(newGame);
            ctx.SubmitChanges();

            // ID generated by database
            int gameID = newGame.ID;

            GameAction joinAction = new GameAction()
            {
                ActionTypeID = (int)ActionTypes.UserJoined,
                GameID = gameID,
                IsCommitted = false,
                UserID = user.ID,
                Timestamp = DateTime.Now
            };

            ctx.GameActions.InsertOnSubmit(joinAction);
            ctx.SubmitChanges();

            return gameID;
        }
        public Game GetGameByID(int gameID)
        {
            return ctx.Games.Single(g => g.ID == gameID);
        }

        public List<GameAction> GetUncommittedActions()
        {
            List<GameAction> uncommittedActions = ctx.GameActions.Where(ga => !ga.IsCommitted)
                                                                 .OrderBy(ga => ga.ID)
                                                                 .ToList();
            return uncommittedActions;
        }
        public List<GameAction> GetCommittedActions(int gameID, int fromPositionInclusive)
        {
            return ctx.GameActions.Where(ga => ga.GameID == gameID && ga.ID >= fromPositionInclusive)
                                  .OrderBy(ga => ga.ID)
                                  .ToList();
        }

        public List<int> GetUsersInGame(Game game)
        {
            // check if at least two users have joined and did not leave again ;)
           
            // get all committed leave and join actions
            List<GameAction> joinLeaveActions = ctx.GameActions.Where(ga => (ga.ActionTypeID == (int)ActionTypes.UserJoined ||
                                                                    ga.ActionTypeID == (int)ActionTypes.UserLeft))
                                                                    .OrderBy(ga => ga.ID)
                                                                    .ToList();
            HashSet<int> joinedUsers = new HashSet<int>();
            foreach (GameAction ga in joinLeaveActions)
            {
                if (!ga.UserID.HasValue)
                    throw new Exception("UserID cannot be null in UserJoined and UserLeft actions.");

                if (ga.ActionTypeID == (int)ActionTypes.UserJoined)
                    joinedUsers.Add(ga.UserID.Value);
                else
                    joinedUsers.Remove(ga.UserID.Value);
            }

            return joinedUsers.ToList();
        }
        public int GetFreeSeat(Game game, List<int> joinedUsers)
        {
            var reservedSeats = (from ga in ctx.GameActions
					            where ga.ActionTypeID == 1 && ga.IsCommitted
					            group ga by ga.UserID.Value into userJoins
					            select new
					            {
						            UserID = userJoins.Key,
						            Seat = userJoins.Single(uj => uj.ID == userJoins.Max(uu => uu.ID)).Data
					            }).ToList();

            

            return 1;
            //ctx.GameActions.Where(ga => ga.ActionTypeID == (int)ActionTypes.UserJoined)
        }

        private bool ValidateAction(GameAction action, List<Game> activeGames)
        {
            if (activeGames.Any(g => g.ID == action.GameID))
                return true;
            else
            {
                // commit or delete action???
                return false;
            }
        }
    }

    public enum ActionTypes
    {
        UserJoined = 1,
        UserLeft = 2,
        Bet = 3,
        Raise = 4,
        Check = 5,
        Fold = 6,

        InitialCards = 7, // players 2 cards, who else got cards
        Flop = 8,
        Turn = 9,
        River = 10,
        YourTurn = 11 // player ID
    };
}
